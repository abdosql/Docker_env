version: '3.8'

services:
  load_balancer:
    image: haproxy:2.3
    ports:
      - "${HTTP_PORT:-8080}:80"
      - "8404:8404"  # For HAProxy stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - nginx
    restart: unless-stopped

  symfony:
    build:
      context: .
      dockerfile: docker/symfony/Dockerfile
    volumes:
      - ./symfony:/var/www/symfony
      - /var/www/symfony/vendor
    environment:
      - APP_ENV=dev
      - APP_DEBUG=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-symfony}:${POSTGRES_PASSWORD:-symfony_password}@database:5432/${POSTGRES_DB:-symfony}?serverVersion=13&charset=utf8
    depends_on:
      - database
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "php", "/var/www/symfony/bin/console", "doctrine:query:sql", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    ports:
      - "9000:9000"

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./symfony:/var/www/symfony
    depends_on:
      - symfony
    ports:
      - "8080:80"
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  python_worker:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    volumes:
      - ./python_worker:/app
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - REDIS_HOST=redis
      - POSTGRES_HOST=database
      - POSTGRES_DB=${POSTGRES_DB:-symfony}
      - POSTGRES_USER=${POSTGRES_USER:-symfony}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-symfony_password}
    depends_on:
      - rabbitmq
      - redis
    command: ["python", "src/main.py"]
    restart: unless-stopped

  database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-symfony}
      - POSTGRES_USER=${POSTGRES_USER:-symfony}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-symfony_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped

  redis:
    image: redis:alpine
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    environment:
    - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
    - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    volumes:
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    volumes:
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}


  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

  cron:
    build:
      context: .
      dockerfile: docker/cron/Dockerfile
    volumes:
      - ./symfony:/var/www/symfony
      - /var/www/symfony/vendor
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-symfony}:${POSTGRES_PASSWORD:-symfony_password}@database:5432/${POSTGRES_DB:-symfony}?serverVersion=13&charset=utf8
    depends_on:
      - database
      - redis
      - rabbitmq
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data: